version: '3.8'

services:
  db:
    image: postgres:15.4
    restart: always
    hostname: postgres
    env_file:
      - .env
    ports:
      - "5455:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - db-volume:/var/lib/postgresql/data/
      - db-log-volume:/var/log/postgresql/
  rabbitmq:
    image: rabbitmq:3.13.0-management
    hostname: rabbitmq
    env_file:
      - .env
    ports:
      - "5675:5672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 5s
      timeout: 3s
      retries: 5
  migration:
    build:
      context: ./..
      dockerfile: build/migration/Dockerfile
    env_file:
      - .env
    hostname: migration
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  calendar:
    build:
        context: ./..
        dockerfile: build/calendar/Dockerfile
    env_file:
      - .env
    ports:
      - "3000:3000"
      - "50051:50051"
      - "8080:8080"
    depends_on:
      migration:
        condition: service_completed_successfully
  scheduler:
    build:
      context: ./..
      dockerfile: build/scheduler/Dockerfile
    env_file:
      - .env
    depends_on:
      migration:
        condition: service_completed_successfully
  sender:
    build:
      context: ./..
      dockerfile: build/sender/Dockerfile
    env_file:
      - .env
    depends_on:
      migration:
        condition: service_completed_successfully

volumes:
  db-volume:
  db-log-volume:
  rabbitmq-volume:
  rabbitmq-log-volume:

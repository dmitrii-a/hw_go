// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/dmitrii-a/hw_go/hw12_13_14_15_calendar/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EventRepository is an autogenerated mock type for the EventRepository type
type EventRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: event
func (_m *EventRepository) Add(event *domain.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: eventID
func (_m *EventRepository) Delete(eventID string) error {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEventBeforeDate provides a mock function with given fields: date
func (_m *EventRepository) DeleteEventBeforeDate(date time.Time) error {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventBeforeDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: eventID
func (_m *EventRepository) Get(eventID string) (*domain.Event, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Event, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Event); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByNotifyTime provides a mock function with given fields: startTime, endTime
func (_m *EventRepository) GetEventsByNotifyTime(startTime time.Time, endTime time.Time) ([]*domain.Event, error) {
	ret := _m.Called(startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByNotifyTime")
	}

	var r0 []*domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]*domain.Event, error)); ok {
		return rf(startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*domain.Event); ok {
		r0 = rf(startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByPeriod provides a mock function with given fields: startTime, endTime
func (_m *EventRepository) GetEventsByPeriod(startTime time.Time, endTime time.Time) ([]*domain.Event, error) {
	ret := _m.Called(startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByPeriod")
	}

	var r0 []*domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]*domain.Event, error)); ok {
		return rf(startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*domain.Event); ok {
		r0 = rf(startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: event
func (_m *EventRepository) Update(event *domain.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventRepository creates a new instance of EventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventRepository {
	mock := &EventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

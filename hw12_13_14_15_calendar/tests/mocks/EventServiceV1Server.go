// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pb "github.com/dmitrii-a/hw_go/hw12_13_14_15_calendar/internal/presentation/grpc/api/v1"
)

// EventServiceV1Server is an autogenerated mock type for the EventServiceV1Server type
type EventServiceV1Server struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: _a0, _a1
func (_m *EventServiceV1Server) CreateEvent(_a0 context.Context, _a1 *pb.EventRequest) (*pb.EventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 *pb.EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventRequest) (*pb.EventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventRequest) *pb.EventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.EventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: _a0, _a1
func (_m *EventServiceV1Server) DeleteEvent(_a0 context.Context, _a1 *pb.EventIDRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventIDRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventIDRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.EventIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: _a0, _a1
func (_m *EventServiceV1Server) GetEvent(_a0 context.Context, _a1 *pb.EventIDRequest) (*pb.EventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 *pb.EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventIDRequest) (*pb.EventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventIDRequest) *pb.EventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.EventIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByPeriod provides a mock function with given fields: _a0, _a1
func (_m *EventServiceV1Server) GetEventsByPeriod(_a0 context.Context, _a1 *pb.TimePeriodRequest) (*pb.EventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByPeriod")
	}

	var r0 *pb.EventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TimePeriodRequest) (*pb.EventsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TimePeriodRequest) *pb.EventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.EventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.TimePeriodRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: _a0, _a1
func (_m *EventServiceV1Server) UpdateEvent(_a0 context.Context, _a1 *pb.EventRequest) (*pb.EventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 *pb.EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventRequest) (*pb.EventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EventRequest) *pb.EventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.EventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedEventServiceV1Server provides a mock function with given fields:
func (_m *EventServiceV1Server) mustEmbedUnimplementedEventServiceV1Server() {
	_m.Called()
}

// NewEventServiceV1Server creates a new instance of EventServiceV1Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventServiceV1Server(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventServiceV1Server {
	mock := &EventServiceV1Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
